<div id="chat-icon" class="chat-icon">
  <button class="btn btn-primary rounded-circle" style="width: 60px; height: 60px; font-size: 1.5em;">
    <i class="fa-solid fa-comments"></i>
  </button>
</div>

<div id="chat-container" class="chat-container hidden">
  <div class="container mt-4" style="max-width: 500px;">
    <h3 class="text-center mb-3">Chat with AI Assistant</h3>
    
    <div id="chat-window" class="border rounded p-3 mb-3" style="height: 300px; overflow-y: auto;">
      <!-- Chat messages will be appended here -->
    </div>

    <div id="potential-queries" class="mb-3">
      <!-- Potential queries will be appended here -->
    </div>

    <%= form_with url: root_path, method: :get, local: true, id: 'chat-form', class: 'd-flex align-items-end mb-3' do |form| %>
      <%= form.text_area :user_input, id: 'user-input', class: 'form-control me-2', placeholder: 'Enter your message...', style: 'flex: 1; height: auto; max-height: 100px; resize: none; overflow-y: auto;' %>
      <%= form.button class: 'btn btn-primary rounded', style: 'width: 45px; height: 40px;' do %>
        <i class="fa-solid fa-paper-plane"></i>
      <% end %>
    <% end %>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const chatIcon = document.getElementById('chat-icon');
    const chatContainer = document.getElementById('chat-container');
    const form = document.getElementById('chat-form');
    const chatWindow = document.getElementById('chat-window');
    const userInput = document.getElementById('user-input');
    const potentialQueriesContainer = document.getElementById('potential-queries');
    let initialMessageDisplayed = false;

    userInput.style.height = '20px';

    chatIcon.addEventListener('click', function() {
      chatContainer.classList.toggle('hidden');
      
      if (!chatContainer.classList.contains('hidden') && !initialMessageDisplayed) {
        const initialMessage = document.createElement('div');
        initialMessage.innerHTML = '<p class="bg-secondary text-white p-2 rounded d-inline-block text-start mb-2" style="max-width: 80%;"><strong>Assistant:</strong> How can I help you today?</p>';
        initialMessage.classList.add('d-flex', 'justify-content-start');
        chatWindow.appendChild(initialMessage);
        chatWindow.scrollTop = chatWindow.scrollHeight;
        initialMessageDisplayed = true;
      }
    });

    userInput.addEventListener('input', function() {
      this.style.height = '20px';
      this.style.height = Math.min(this.scrollHeight, 100) + 'px';
    });

    userInput.addEventListener('keydown', function(event) {
      if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        form.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true }));
      }
    });

    form.addEventListener('submit', function(event) {
      event.preventDefault();

      if (userInput.value.trim() === '') {
        return;
      }

      // Clear potential queries
      potentialQueriesContainer.innerHTML = '';

      const userMessage = document.createElement('div');
      userMessage.innerHTML = `<p class="bg-light text-dark p-2 rounded d-inline-block text-end mb-2" style="max-width: 80%;"><strong>You:</strong> ${userInput.value}</p>`;
      userMessage.classList.add('d-flex', 'justify-content-end');
      chatWindow.appendChild(userMessage);

      const loadingMessage = document.createElement('div');
      loadingMessage.innerHTML = '<p class="bg-secondary text-white p-2 rounded d-inline-block text-start mb-2" style="max-width: 80%;"><i class="fa-solid fa-circle fa-bounce" style="font-size: 0.3em; animation-delay: 0s;"></i> <i class="fa-solid fa-circle fa-bounce" style="font-size: 0.3em; animation-delay: 0.2s;"></i> <i class="fa-solid fa-circle fa-bounce" style="font-size: 0.3em; animation-delay: 0.4s;"></i></p>';
      loadingMessage.classList.add('d-flex', 'justify-content-start');
      chatWindow.appendChild(loadingMessage);
      chatWindow.scrollTop = chatWindow.scrollHeight;

      fetch(`${form.action}?user_input=${encodeURIComponent(userInput.value)}`, {
        method: 'GET',
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => response.json())
      .then(data => {
        chatWindow.removeChild(loadingMessage);

        const assistantMessage = document.createElement('div');
        if (data.response.choices && data.response.choices[0] && data.response.choices[0].message) {
          let messageContent = data.response.choices[0].message.content
            .split("Potential queries you might have next:")[0]
            .replace(/\[\d+(?:,\s*pp\.\s*\d+(?:,\s*\d+)*)?\]/g, '')
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '')
            .replace(/References:\s*\d+\.\s*/g, '')
            .replace(/References:.*$/, '')
            .replace(/\s+$/, '')
            .replace(/\s+\.$/, '')
            .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
            .trim();
          let formattedMessageContent = messageContent.replace(/\n/g, '<br>');
          assistantMessage.innerHTML = `<p class="bg-secondary text-white p-2 rounded d-inline-block text-start mb-2" style="max-width: 80%;"><strong>Assistant:</strong> ${formattedMessageContent}</p>`;
        } else {
          assistantMessage.innerHTML = '<p class="bg-secondary text-white p-2 rounded d-inline-block text-start mb-2" style="max-width: 80%;"><strong>Assistant:</strong> No valid response received.</p>';
        }
        assistantMessage.classList.add('d-flex', 'justify-content-start');
        chatWindow.appendChild(assistantMessage);
        chatWindow.scrollTop = chatWindow.scrollHeight;

        // Remove numbers from potential queries
        if (data.potential_queries && data.potential_queries.length > 0) {
          data.potential_queries = data.potential_queries.map(query => query.replace(/^\d+\.\s*/, ''));
        }

        // Display potential queries as buttons
        if (data.potential_queries && data.potential_queries.length > 0) {
          data.potential_queries.forEach(query => {
            const queryButton = document.createElement('button');
            queryButton.className = 'btn btn-outline-primary mb-2';
            queryButton.style.width = '100%';
            queryButton.textContent = query;
            queryButton.addEventListener('click', function() {
              userInput.value = query;
              form.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true }));
            });
            potentialQueriesContainer.appendChild(queryButton);
          });
        }
      })
      .catch(error => {
        chatWindow.removeChild(loadingMessage);

        const errorMessage = document.createElement('div');
        errorMessage.innerHTML = '<p class="bg-danger text-white p-2 rounded d-inline-block text-start mb-2" style="max-width: 70%;"><strong>Error:</strong> Unable to get a response from the assistant.</p>';
        errorMessage.classList.add('d-flex', 'justify-content-start');
        chatWindow.appendChild(errorMessage);
        chatWindow.scrollTop = chatWindow.scrollHeight;
      });

      userInput.value = '';
      userInput.style.height = '20px';
    });
  });
</script>
