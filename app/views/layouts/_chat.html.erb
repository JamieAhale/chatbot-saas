<div id="chat-icon" class="chat-icon">
  <button class="btn btn-primary rounded-circle" style="width: 60px; height: 60px; font-size: 1.5em;">
    <i class="fa-solid fa-comments"></i>
  </button>
</div>

<div id="chat-container" class="chat-container hidden">
  <div class="container mt-4" style="max-width: 500px;">
    <h3 class="text-center mb-3">Chat with AI Assistant</h3>
    
    <div id="chat-window" class="border rounded p-3 mb-3" style="height: 300px; overflow-y: auto;">
      <!-- Chat messages will be appended here -->
    </div>

    <%= form_with url: chat_path, method: :get, local: true, id: 'chat-form', class: 'd-flex align-items-end mb-3' do |form| %>
      <%= form.text_area :user_input, id: 'user-input', class: 'form-control me-2', placeholder: 'Enter your message...', style: 'flex: 1; height: auto; max-height: 100px; resize: none; overflow-y: auto;' %>
      <%= form.button class: 'btn btn-primary rounded', style: 'width: 45px; height: 40px;' do %>
        <i class="fa-solid fa-paper-plane"></i>
      <% end %>
    <% end %>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const chatIcon = document.getElementById('chat-icon');
    const chatContainer = document.getElementById('chat-container');
    const form = document.getElementById('chat-form');
    const chatWindow = document.getElementById('chat-window');
    const userInput = document.getElementById('user-input');
    let initialMessageDisplayed = false; // Flag to track if the initial message has been displayed

    userInput.style.height = '20px'; // Set initial height

    chatIcon.addEventListener('click', function() {
      chatContainer.classList.toggle('hidden');
      
      // Check if the chat window is now visible and the initial message hasnt been displayed yet
      if (!chatContainer.classList.contains('hidden') && !initialMessageDisplayed) {
        // Append initial assistant message
        const initialMessage = document.createElement('div');
        initialMessage.innerHTML = '<p class="bg-secondary text-white p-2 rounded d-inline-block text-start mb-2" style="max-width: 80%;"><strong>Assistant:</strong> How can I help you today?</p>';
        initialMessage.classList.add('d-flex', 'justify-content-start');
        chatWindow.appendChild(initialMessage);

        // Scroll to the latest message
        chatWindow.scrollTop = chatWindow.scrollHeight;

        // Set the flag to true to prevent the message from being displayed again
        initialMessageDisplayed = true;
      }
    });

    // Adjust textarea height based on content
    userInput.addEventListener('input', function() {
      this.style.height = '20px'; // Reset to initial height
      this.style.height = Math.min(this.scrollHeight, 100) + 'px'; // Set new height, but not more than max-height
    });

    // Submit form on Enter key press
    userInput.addEventListener('keydown', function(event) {
      if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault(); // Prevent newline
        form.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true }));
      }
    });

    form.addEventListener('submit', function(event) {
      event.preventDefault();

      if (userInput.value.trim() === '') {
        return;
      }

      // Append user's message to the chat window (right-aligned)
      const userMessage = document.createElement('div');
      userMessage.innerHTML = `<p class="bg-light text-dark p-2 rounded d-inline-block text-end mb-2" style="max-width: 80%;"><strong>You:</strong> ${userInput.value}</p>`;
      userMessage.classList.add('d-flex', 'justify-content-end');
      chatWindow.appendChild(userMessage);

      // Append "Loading..." placeholder
      const loadingMessage = document.createElement('div');
      loadingMessage.innerHTML = '<p class="bg-secondary text-white p-2 rounded d-inline-block text-start mb-2" style="max-width: 80%;"><i class="fa-solid fa-circle fa-bounce" style="font-size: 0.3em; animation-delay: 0s;"></i> <i class="fa-solid fa-circle fa-bounce" style="font-size: 0.3em; animation-delay: 0.2s;"></i> <i class="fa-solid fa-circle fa-bounce" style="font-size: 0.3em; animation-delay: 0.4s;"></i></p>';
      loadingMessage.classList.add('d-flex', 'justify-content-start');
      chatWindow.appendChild(loadingMessage);

      // Scroll to the latest message
      chatWindow.scrollTop = chatWindow.scrollHeight;

      // Send GET request with user input as a query parameter
      fetch(`${form.action}?user_input=${encodeURIComponent(userInput.value)}`, {
        method: 'GET',
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => response.json())
      .then(data => {
        // Remove "Loading..." placeholder
        chatWindow.removeChild(loadingMessage);

        // Append assistant's message to the chat window (left-aligned)
        const assistantMessage = document.createElement('div');
        if (data.choices && data.choices[0] && data.choices[0].message) {
          let messageContent = data.choices[0].message.content;
          const referenceIndex = messageContent.indexOf("[1, pp. 1]");
          if (referenceIndex !== -1) {
            messageContent = messageContent.substring(0, referenceIndex).trim();
          }
          assistantMessage.innerHTML = `<p class="bg-secondary text-white p-2 rounded d-inline-block text-start mb-2" style="max-width: 80%;"><strong>Assistant:</strong> ${messageContent}</p>`;
        } else {
          assistantMessage.innerHTML = '<p class="bg-secondary text-white p-2 rounded d-inline-block text-start mb-2" style="max-width: 80%;"><strong>Assistant:</strong> No valid response received.</p>';
        }
        assistantMessage.classList.add('d-flex', 'justify-content-start');
        chatWindow.appendChild(assistantMessage);

        // Scroll to the latest message
        chatWindow.scrollTop = chatWindow.scrollHeight;
      })
      .catch(error => {
        // Remove "Loading..." placeholder
        chatWindow.removeChild(loadingMessage);

        // Append error message (left-aligned)
        const errorMessage = document.createElement('div');
        errorMessage.innerHTML = '<p class="bg-danger text-white p-2 rounded d-inline-block text-start mb-2" style="max-width: 70%;"><strong>Error:</strong> Unable to get a response from the assistant.</p>';
        errorMessage.classList.add('d-flex', 'justify-content-start');
        chatWindow.appendChild(errorMessage);

        // Scroll to the latest message
        chatWindow.scrollTop = chatWindow.scrollHeight;
      });

      // Clear the input field after sending the message
      userInput.value = '';
      userInput.style.height = '20px'; // Reset height after clearing
    });
  });
</script>
