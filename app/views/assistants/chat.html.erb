<!-- app/views/assistants/chat.html.erb -->
<div class="container mt-5" style="max-width: 600px;">
  <h1 class="text-center mb-4">Chat with AI Assistant</h1>
  
  <div id="chat-window" class="border rounded p-3 mb-3" style="height: 500px; overflow-y: auto;">
    <!-- Chat messages will be appended here -->
  </div>

  <%= form_with url: root_path, method: :get, local: true, id: 'chat-form', class: 'd-flex' do |form| %>
    <%= form.text_field :user_input, size: 50, id: 'user-input', class: 'form-control me-2', placeholder: 'Enter your message...' %>
    <%= form.submit "Send", class: 'btn btn-primary' %>
  <% end %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('chat-form');
    const chatWindow = document.getElementById('chat-window');

    form.addEventListener('submit', function(event) {
      event.preventDefault();

      const userInput = document.getElementById('user-input').value;
      if (userInput.trim() === '') {
        return;
      }

      // Append user's message to the chat window (right-aligned)
      const userMessage = document.createElement('div');
      userMessage.innerHTML = `<p class="bg-light text-dark p-2 rounded d-inline-block text-end mb-2" style="max-width: 75%;"><strong>You:</strong> ${userInput}</p>`;
      userMessage.classList.add('d-flex', 'justify-content-end');
      chatWindow.appendChild(userMessage);

      fetch(form.action + `?user_input=${encodeURIComponent(userInput)}`, {
        method: 'GET',
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => response.json())
      .then(data => {
        // Append assistant's message to the chat window (left-aligned)
        const assistantMessage = document.createElement('div');
        if (data.choices && data.choices[0] && data.choices[0].message) {
          let messageContent = data.choices[0].message.content;
          const referenceIndex = messageContent.indexOf("[1, pp. 1]");
          if (referenceIndex !== -1) {
            messageContent = messageContent.substring(0, referenceIndex).trim();
          }
          assistantMessage.innerHTML = `<p class="bg-secondary text-white p-2 rounded d-inline-block text-start mb-2" style="max-width: 75%;"><strong>Assistant:</strong> ${messageContent}</p>`;
        } else {
          assistantMessage.innerHTML = '<p class="bg-secondary text-white p-2 rounded d-inline-block text-start mb-2" style="max-width: 75%;"><strong>Assistant:</strong> No valid response received.</p>';
        }
        assistantMessage.classList.add('d-flex', 'justify-content-start');
        chatWindow.appendChild(assistantMessage);

        // Scroll to the latest message
        chatWindow.scrollTop = chatWindow.scrollHeight;
      })
      .catch(error => {
        // Append error message (left-aligned)
        const errorMessage = document.createElement('div');
        errorMessage.innerHTML = '<p class="bg-danger text-white p-2 rounded d-inline-block text-start mb-2" style="max-width: 75%;"><strong>Error:</strong> Unable to get a response from the assistant.</p>';
        errorMessage.classList.add('d-flex', 'justify-content-start');
        chatWindow.appendChild(errorMessage);

        // Scroll to the latest message
        chatWindow.scrollTop = chatWindow.scrollHeight;
      });

      // Clear the input field after sending the message
      document.getElementById('user-input').value = '';
    });
  });
</script>
